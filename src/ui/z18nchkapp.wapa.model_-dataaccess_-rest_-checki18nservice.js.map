{"version":3,"sources":["../../../../dev/model/dataAccess/rest/CheckI18nService.js"],"names":["ajax","constants","CheckI18nService","checkTranslations","defaultLanguage","compareAgainstDefaultFile","bspNames","targetLanguages","showExcludedEntries","sUrl+
Params","split","forEach","sTrgtLang","sBspName","send","SRV_ROOT","ignoreMessages","oIgnorePayload","sToken","fetchCSRF","data","JSON","stringify","method","CSRFToken","deleteIgnoredMessages","bDelete"],"mappings":";;;;;;;QAAOA,I;;QACAC,S;AAEP;AACA;AACA+
;AACA;;;AACe,QAAMC,gBAAN,CAAuB;AAClC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC2B,UAAjBC,iBAAiB,CAAC;AACpBC,MAAAA,eADoB;AAEpBC,MAAAA,yBAFoB;AAGpBC,MAAAA,QAHoB;AAIpBC,MAAAA,eAJoB;AAKpBC,MAAAA,mBAAmB,GAAG;AALF,KAAD,EAMpB;AACC,UAAIC,UAAU,GAAI,YAA+
WL,eAAgB,EAA7C;AACAK,MAAAA,UAAU,IAAK,mBAAkBJ,yBAA0B,EAA3D;AACAI,MAAAA,UAAU,IAAK,iBAAgBD,mBAAoB,EAAnD;AACAD,MAAAA,eAAe,CAACG,KAAhB,CAAsB,GAAtB,EAA2BC,OAA3B,CAAmCC,SAAS,IAAKH,UAAU,IAAK,aAAYG,SAAU,EAAtF;AACAN,MAAAA,QAAQ,CAACI,KAAT,CAAe,GAAf,EAAoBC,OAApB,CAA+
4BE,QAAQ,IAAKJ,UAAU,IAAK,YAAWI,QAAS,EAA5E;AACA,aAAOb,IAAI,CAACc,IAAL,CAAW,GAAEb,SAAS,CAACc,QAAS,gBAAeN,UAAW,EAA1D,CAAP;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACwB,UAAdO,cAAc,CAACC,cAAD,EAAiB;AACjC,YAAMC,MAAM,GAAG,MAAMlB,IAAI,CAACmB,SAAL,EAArB;AACA,aAAOnB,IAAI,+
CAACc,IAAL,CAAW,GAAEb,SAAS,CAACc,QAAS,kBAAhC,EAAmD;AACtDK,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,cAAf,CADgD;AAEtDM,QAAAA,MAAM,EAAE,MAF8C;AAGtDC,QAAAA,SAAS,EAAEN;AAH2C,OAAnD,CAAP;AAKH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AAC+B,UAArBO,qBAAqB,CAACR,cAAD,EAAiBS,O+
AAjB,EAA0B;AACjD,YAAMR,MAAM,GAAG,MAAMlB,IAAI,CAACmB,SAAL,EAArB;AACA,aAAOnB,IAAI,CAACc,IAAL,CAAW,GAAEb,SAAS,CAACc,QAAS,8BAAhC,EAA+D;AAClEK,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,cAAf,CAD4D;AAElEM,QAAAA,MAAM,EAAE,MAF0D;AAGlEC,QAAAA,SAAS,EAAEN;AAHuD,OAA/D,C+
AAP;AAKH;;AArDiC","sourcesContent":["import ajax from \"devepos/i18ncheck/model/dataAccess/util/ajax\";\nimport constants from \"devepos/i18ncheck/model/constants\";\n\n/**\n * Service for accessing i18n translation check results\n * @alias devepos.i18nc+
heck.model.dataAccess.rest.CheckI18nService\n */\nexport default class CheckI18nService {\n    /**\n     * Retrieves a list of check i18n translation check results\n     * @param {Object} parameters parameters\n     * @param {string} parameters.defaultLa+
ngauge default language as base line for comparison\n     * @param {boolean} parameters.compareAgainstDefaultFile\n     *   if <code>true</code> the default file will be used for comparison\n     * @param {string} parameters.targetLanguages comma separat+
ed list of target languages\n     * @param {string} parameters.bspNames comma separated list oof BSP name filters\n     * @param {boolean} parameters.showExcludedEntries if <code>true</code> previously excluded entries will also be read\n     * @returns +
{Promise<Object>} promise of service response\n     */\n    async checkTranslations({\n        defaultLanguage,\n        compareAgainstDefaultFile,\n        bspNames,\n        targetLanguages,\n        showExcludedEntries = false\n    }) {\n        let s+
UrlParams = `?defLang=${defaultLanguage}`;\n        sUrlParams += `&compAgainstDef=${compareAgainstDefaultFile}`;\n        sUrlParams += `&showExcluded=${showExcludedEntries}`;\n        targetLanguages.split(\",\").forEach(sTrgtLang => (sUrlParams += `&t+
rgtLang=${sTrgtLang}`));\n        bspNames.split(\",\").forEach(sBspName => (sUrlParams += `&bspName=${sBspName}`));\n        return ajax.send(`${constants.SRV_ROOT}/checkResults${sUrlParams}`);\n    }\n\n    /**\n     * Sets the files contained in 'oIgn+
orePayload' to ignored\n     * @param {Object} oIgnorePayload files to be ignored\n     * @returns {Promise<JSON>} a promise of the response result\n     */\n    async ignoreMessages(oIgnorePayload) {\n        const sToken = await ajax.fetchCSRF();\n    +
    return ajax.send(`${constants.SRV_ROOT}/ignoredMessages`, {\n            data: JSON.stringify(oIgnorePayload),\n            method: \"POST\",\n            CSRFToken: sToken\n        });\n    }\n    /**\n     * Deletes i18n messages that were previous+
ly ignored\n     * @param {Object} oIgnorePayload files to be ignored\n     * @param {boolean} bDelete if <code>true</code> the deletion mode should be used\n     * @returns {Promise<JSON>} a promise of the response result\n     */\n    async deleteIgnor+
edMessages(oIgnorePayload, bDelete) {\n        const sToken = await ajax.fetchCSRF();\n        return ajax.send(`${constants.SRV_ROOT}/ignoredMessages?delete=true`, {\n            data: JSON.stringify(oIgnorePayload),\n            method: \"POST\",\n    +
        CSRFToken: sToken\n        });\n    }\n}\n"],"file":"CheckI18nService.js"}                                                                                                                                                                             
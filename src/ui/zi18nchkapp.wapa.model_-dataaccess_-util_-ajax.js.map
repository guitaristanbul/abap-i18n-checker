{"version":3,"sources":["../../../../dev/model/dataAccess/util/ajax.js"],"names":["$","CSRF_TOKEN_HEADER","send","sUrl","headers","method","data","undefined","dataType","CSRFToken","username","password","_addCSRFToRequestData","Promise","fnResolve","fnRe+
ject","ajax","url","success","oData","sStatus","oXhr","status","request","error","sError","statusText","sendSync","oResponse","async","sStatusText","oJqXHR","fetchCSRF","bInvalidate","_sCSRFToken","oResult","accept","getResponseHeader","oHeaders","sCSRFT+
oken"],"mappings":"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","sourcesContent":["import $ from \"jQuery.sap.global\";\n\nexport default {\n    /**\n     * CSRF Token Header\n     */\n    CSRF_TOKEN_HEA+
DER: \"X-CSRF-Token\",\n    /**\n     * Promisfied AJAX call\n     * @param {string} sUrl request url\n     * @param {Object} parameters parameters for the request\n     * @param {Object} parameters.headers optional http headers\n     * @param {Object} p+
arameters.data payload for the request\n     * @param {string} parameters.dataType the expected data type (default: json)\n     * @param {string} parameters.username username for basic authentication\n     * @param {string} parameters.password password f+
or basic authentication\n     * @param {string} parameters.method request method (e.g. GET/POST/PUT)\n     * @param {string} parameters.CSRFToken CSRF token for POST/PUT/DELETE\n     * @returns {Promise<Object>} promise to ajax request\n     * @public\n +
    */\n    send(\n        sUrl,\n        {\n            headers = {},\n            method = \"GET\",\n            data = undefined,\n            dataType = \"json\",\n            CSRFToken = \"\",\n            username = \"\",\n            password = \"+
\"\n        } = {}\n    ) {\n        this._addCSRFToRequestData(headers, CSRFToken);\n        return new Promise((fnResolve, fnReject) => {\n            $.ajax({\n                url: sUrl,\n                headers: headers,\n                method: meth+
od,\n                username,\n                dataType,\n                password,\n                data: data,\n                success: (oData, sStatus, oXhr) => {\n                    fnResolve({ data: oData, status: sStatus, request: oXhr });\n    +
            },\n                error: (oXhr, sStatus, sError) => {\n                    fnReject({ status: oXhr.status, statusText: sError });\n                }\n            });\n        });\n    },\n    /**\n     * Fetches Data synchronously\n     * @+
param {string} sUrl url for the request\n     * @param {Object} parameters Parameters\n     * @param {String} parameters.method Request method\n     * @param {String} parameters.url URL string for request\n     * @param {Array|Object} parameters.data Opt+
ional payload for the request,\n     * @param {String} parameters.dataType The expected result type of the response\n     * @param {Object} parameters.headers Optional map with request headers (key/value pairs)\n     * @param {string} parameters.CSRFToke+
n CSRF token for POST/PUT/DELETE\n     * @returns {Object} the result of synchronous request\n     */\n    sendSync(sUrl, { method = \"GET\", data, dataType = \"json\", headers = {}, CSRFToken = \"\" } = {}) {\n        let oResponse;\n        this._addCS+
RFToRequestData(headers, CSRFToken);\n        $.ajax({\n            method,\n            url: sUrl,\n            data,\n            dataType,\n            async: false,\n            headers,\n            success: (oData, sStatusText, oJqXHR) => {\n      +
          oResponse = { data: oData, status: oJqXHR.status };\n            },\n            error: (oJqXHR, statusText, sError) => {\n                oResponse = { error: sError, status: oJqXHR.status };\n            }\n        });\n\n        return oResp+
onse;\n    },\n    /**\n     * Fetches CSRF token\n     * @param {boolean} bInvalidate if <code>true</code> the token will be fetched again from the backend\n     * @returns {Promise<string>} the value of the CSRF-Token\n     * @public\n     */\n    asyn+
c fetchCSRF(bInvalidate = false) {\n        if (bInvalidate) {\n            this._sCSRFToken = \"\";\n        }\n        if (this._sCSRFToken) {\n            return this._sCSRFToken;\n        }\n        const oResult = await this.send(\"/sap/bc/zi18nchks+
rv/\", {\n            method: \"HEAD\",\n            headers: {\n                [this.CSRF_TOKEN_HEADER]: \"Fetch\",\n                accept: \"*/*\"\n            }\n        });\n        this._sCSRFToken = oResult?.request?.getResponseHeader(this.CSRF_T+
OKEN_HEADER);\n        return this._sCSRFToken;\n    },\n    _addCSRFToRequestData(oHeaders, sCSRFToken) {\n        if (!oHeaders[this.CSRF_TOKEN_HEADER] && sCSRFToken) {\n            oHeaders[this.CSRF_TOKEN_HEADER] = sCSRFToken;\n        }\n    }\n};\n+
"],"file":"ajax.js"}                                                                                                                                                                                                                                           